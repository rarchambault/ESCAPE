package ca.mcgill.ecse428.ESCAPE.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import ca.mcgill.ecse428.ESCAPE.dto.EventRequestDto;
import ca.mcgill.ecse428.ESCAPE.dto.EventResponseDto;
import ca.mcgill.ecse428.ESCAPE.exception.EventException;
import ca.mcgill.ecse428.ESCAPE.model.Event;
import ca.mcgill.ecse428.ESCAPE.model.UserProfile;
import ca.mcgill.ecse428.ESCAPE.repository.EventRepository;

@Service
public class EventService {
    private final EventRepository eventRepository;

    @Autowired
    public EventService(EventRepository eventRepository) {
        this.eventRepository = eventRepository;
    }

    public Iterable<Event> getAllEvents() {
        return eventRepository.findAll();
    }

    public Event getEventById(int id) throws EventException {
        Optional<Event> optionalEvent = eventRepository.findById(id);
        if (optionalEvent.isPresent()) {
            return optionalEvent.get();
        } else {
            throw new EventException(HttpStatus.NOT_FOUND, "Event not found with id: " + id);
        }
    }

    // TO DO implement autogenerated IDs, also add user profile when the repo is made
    public EventResponseDto createEvent(EventRequestDto request) {
    	UserProfile creator = null;
    	//creator = UserProfileRepository.getUserProfileById(request.getUserId());
    	Event event = new Event(request.getName(), request.getDescription(), request.getTicketPrice(), request.getUserId(), request.getCapacity(), request.getStartTime());
    	eventRepository.save(event);
    	return new EventResponseDto(event);
    }

    public void updateEvent(int id, Event event) throws EventException {
        Optional<Event> optionalEvent = eventRepository.findById(id);
        if (optionalEvent.isPresent()) {
            event.setEventId(id);
            eventRepository.save(event);
        } else {
            throw new EventException(HttpStatus.NOT_FOUND, "Event not found with id: " + id);
        }
    }

    public void deleteEvent(int id) throws EventException {
        Optional<Event> optionalEvent = eventRepository.findById(id);
        if (optionalEvent.isPresent()) {
            eventRepository.delete(optionalEvent.get());
        } else {
            throw new EventException(HttpStatus.NOT_FOUND, "Event not found with id: " + id);
        }
    }
}