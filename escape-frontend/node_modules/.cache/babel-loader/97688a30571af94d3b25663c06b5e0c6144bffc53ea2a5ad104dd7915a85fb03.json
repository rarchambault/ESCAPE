{"ast":null,"code":"// Extensions\nimport { Service } from '../service'; // Utilities\n\nimport { getObjectValueByPath } from '../../util/helpers';\nimport { consoleError, consoleWarn } from '../../util/console';\nconst LANG_PREFIX = '$vuetify.';\nconst fallback = Symbol('Lang fallback');\nfunction getTranslation(locale, key, usingDefault = false, defaultLocale) {\n  const shortKey = key.replace(LANG_PREFIX, '');\n  let translation = getObjectValueByPath(locale, shortKey, fallback);\n  if (translation === fallback) {\n    if (usingDefault) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`);\n      translation = key;\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`);\n      translation = getTranslation(defaultLocale, key, true, defaultLocale);\n    }\n  }\n  return translation;\n}\nexport class Lang extends Service {\n  constructor(preset) {\n    super();\n    this.defaultLocale = 'en';\n    const {\n      current,\n      locales,\n      t\n    } = preset[Lang.property];\n    this.current = current;\n    this.locales = locales;\n    this.translator = t || this.defaultTranslator;\n  }\n  currentLocale(key) {\n    const translation = this.locales[this.current];\n    const defaultLocale = this.locales[this.defaultLocale];\n    return getTranslation(translation, key, false, defaultLocale);\n  }\n  t(key, ...params) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params);\n    return this.translator(key, ...params);\n  }\n  defaultTranslator(key, ...params) {\n    return this.replace(this.currentLocale(key), params);\n  }\n  replace(str, params) {\n    return str.replace(/\\{(\\d+)\\}/g, (match, index) => {\n      /* istanbul ignore next */\n      return String(params[+index]);\n    });\n  }\n}\nLang.property = 'lang';","map":{"version":3,"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,YAAxB,C,CAEA;;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,oBAA1C;AASA,MAAMC,WAAW,GAAG,WAApB;AACA,MAAMC,QAAQ,GAAGC,MAAM,CAAC,eAAD,CAAvB;AAEA,SAASC,cAAT,CACEC,MADF,EAEEC,GAFF,EAGEC,YAAY,GAAG,KAHjB,EAIEC,aAJF,EAI8B;EAE5B,MAAMC,QAAQ,GAAGH,GAAG,CAACI,OAAJ,CAAYT,WAAZ,EAAyB,EAAzB,CAAjB;EACA,IAAIU,WAAW,GAAGb,oBAAoB,CAACO,MAAD,EAASI,QAAT,EAAmBP,QAAnB,CAAtC;EAEA,IAAIS,WAAW,KAAKT,QAApB,EAA8B;IAC5B,IAAIK,YAAJ,EAAkB;MAChBR,YAAY,CAAC,oBAAoBU,QAAQ,yBAA7B,CAAZ;MACAE,WAAW,GAAGL,GAAd;IACD,CAHD,MAGO;MACLN,WAAW,CAAC,oBAAoBS,QAAQ,sCAA7B,CAAX;MACAE,WAAW,GAAGP,cAAc,CAACI,aAAD,EAAgBF,GAAhB,EAAqB,IAArB,EAA2BE,aAA3B,CAA5B;IACD;EACF;EAED,OAAOG,WAAP;AACD;AAED,OAAM,MAAOC,IAAP,SAAoBf,OAApB,CAA2B;EAW/BgB,YAAaC,MAAb,EAAkC;IAChC;IAPK,qBAAgB,IAAhB;IASL,MAAM;MACJC,OADI;MAEJC,OAFI;MAGJC;IAHI,IAIFH,MAAM,CAACF,IAAI,CAACM,QAAN,CAJV;IAMA,KAAKH,OAAL,GAAeA,OAAf;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKG,UAAL,GAAkBF,CAAC,IAAI,KAAKG,iBAA5B;EACD;EAEMC,aAAa,CAAEf,GAAF,EAAa;IAC/B,MAAMK,WAAW,GAAG,KAAKK,OAAL,CAAa,KAAKD,OAAlB,CAApB;IACA,MAAMP,aAAa,GAAG,KAAKQ,OAAL,CAAa,KAAKR,aAAlB,CAAtB;IAEA,OAAOJ,cAAc,CAACO,WAAD,EAAcL,GAAd,EAAmB,KAAnB,EAA0BE,aAA1B,CAArB;EACD;EAEMS,CAAC,CAAEX,GAAF,EAAe,GAAGgB,MAAlB,EAA+B;IACrC,IAAI,CAAChB,GAAG,CAACiB,UAAJ,CAAetB,WAAf,CAAL,EAAkC,OAAO,KAAKS,OAAL,CAAaJ,GAAb,EAAkBgB,MAAlB,CAAP;IAElC,OAAO,KAAKH,UAAL,CAAgBb,GAAhB,EAAqB,GAAGgB,MAAxB,CAAP;EACD;EAEOF,iBAAiB,CAAEd,GAAF,EAAe,GAAGgB,MAAlB,EAA+B;IACtD,OAAO,KAAKZ,OAAL,CAAa,KAAKW,aAAL,CAAmBf,GAAnB,CAAb,EAAsCgB,MAAtC,CAAP;EACD;EAEOZ,OAAO,CAAEc,GAAF,EAAeF,MAAf,EAA4B;IACzC,OAAOE,GAAG,CAACd,OAAJ,CAAY,YAAZ,EAA0B,CAACe,KAAD,EAAgBC,KAAhB,KAAiC;MAChE;MACA,OAAOC,MAAM,CAACL,MAAM,CAAC,CAACI,KAAF,CAAP,CAAb;IACD,CAHM,CAAP;EAID;AA/C8B;AACxBd,gBAAmB,MAAnB","names":["Service","getObjectValueByPath","consoleError","consoleWarn","LANG_PREFIX","fallback","Symbol","getTranslation","locale","key","usingDefault","defaultLocale","shortKey","replace","translation","Lang","constructor","preset","current","locales","t","property","translator","defaultTranslator","currentLocale","params","startsWith","str","match","index","String"],"sourceRoot":"","sources":["../../../src/services/lang/index.ts"],"sourcesContent":["// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport { getObjectValueByPath } from '../../util/helpers'\nimport { consoleError, consoleWarn } from '../../util/console'\n\n// Types\nimport { VuetifyPreset } from 'vuetify/types/services/presets'\nimport {\n  VuetifyLocale,\n  Lang as ILang,\n} from 'vuetify/types/services/lang'\n\nconst LANG_PREFIX = '$vuetify.'\nconst fallback = Symbol('Lang fallback')\n\nfunction getTranslation (\n  locale: VuetifyLocale,\n  key: string,\n  usingDefault = false,\n  defaultLocale: VuetifyLocale\n): string {\n  const shortKey = key.replace(LANG_PREFIX, '')\n  let translation = getObjectValueByPath(locale, shortKey, fallback) as string | typeof fallback\n\n  if (translation === fallback) {\n    if (usingDefault) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`)\n      translation = key\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`)\n      translation = getTranslation(defaultLocale, key, true, defaultLocale)\n    }\n  }\n\n  return translation\n}\n\nexport class Lang extends Service implements ILang {\n  static property: 'lang' = 'lang'\n\n  public current: ILang['current']\n\n  public defaultLocale = 'en'\n\n  public locales: ILang['locales']\n\n  private translator: ILang['t']\n\n  constructor (preset: VuetifyPreset) {\n    super()\n\n    const {\n      current,\n      locales,\n      t,\n    } = preset[Lang.property]\n\n    this.current = current\n    this.locales = locales\n    this.translator = t || this.defaultTranslator\n  }\n\n  public currentLocale (key: string) {\n    const translation = this.locales[this.current]\n    const defaultLocale = this.locales[this.defaultLocale]\n\n    return getTranslation(translation, key, false, defaultLocale)\n  }\n\n  public t (key: string, ...params: any[]) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params)\n\n    return this.translator(key, ...params)\n  }\n\n  private defaultTranslator (key: string, ...params: any[]) {\n    return this.replace(this.currentLocale(key), params)\n  }\n\n  private replace (str: string, params: any[]) {\n    return str.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n      /* istanbul ignore next */\n      return String(params[+index])\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}