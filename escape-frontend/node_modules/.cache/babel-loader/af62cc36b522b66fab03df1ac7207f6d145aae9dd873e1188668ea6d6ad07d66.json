{"ast":null,"code":"function inserted(el, binding, vnode) {\n  const modifiers = binding.modifiers || {};\n  const value = binding.value;\n  const callback = typeof value === 'object' ? value.handler : value;\n  const {\n    once,\n    ...modifierKeys\n  } = modifiers;\n  const hasModifiers = Object.keys(modifierKeys).length > 0; // Options take top priority\n\n  const options = typeof value === 'object' && value.options ? value.options : hasModifiers // If we have modifiers, use only those provided\n  ? {\n    attributes: modifierKeys.attr,\n    childList: modifierKeys.child,\n    subtree: modifierKeys.sub,\n    characterData: modifierKeys.char\n  } // Defaults to everything on\n  : {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    characterData: true\n  };\n  const observer = new MutationObserver((mutationsList, observer) => {\n    /* istanbul ignore if */\n    if (!el._mutate) return; // Just in case, should never fire\n\n    callback(mutationsList, observer); // If has the once modifier, unbind\n\n    once && unbind(el, binding, vnode);\n  });\n  observer.observe(el, options);\n  el._mutate = Object(el._mutate);\n  el._mutate[vnode.context._uid] = {\n    observer\n  };\n}\nfunction unbind(el, binding, vnode) {\n  var _a;\n  if (!((_a = el._mutate) === null || _a === void 0 ? void 0 : _a[vnode.context._uid])) return;\n  el._mutate[vnode.context._uid].observer.disconnect();\n  delete el._mutate[vnode.context._uid];\n}\nexport const Mutate = {\n  inserted,\n  unbind\n};\nexport default Mutate;","map":{"version":3,"mappings":"AAkBA,SAASA,QAAT,CAAmBC,EAAnB,EAAoCC,OAApC,EAAmEC,KAAnE,EAA+E;EAC7E,MAAMC,SAAS,GAAGF,OAAO,CAACE,SAAR,IAAqB,EAAvC;EACA,MAAMC,KAAK,GAAGH,OAAO,CAACG,KAAtB;EACA,MAAMC,QAAQ,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACE,OAAlC,GAA4CF,KAA7D;EACA,MAAM;IAAEG,IAAF;IAAQ,GAAGC;EAAX,IAA4BL,SAAlC;EACA,MAAMM,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,YAAZ,EAA0BI,MAA1B,GAAmC,CAAxD,CAL6E,CAO7E;;EACA,MAAMC,OAAO,GAAG,OAAOT,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACS,OAAnC,GACZT,KAAK,CAACS,OADM,GAEZJ,YAAY,CACZ;EAAA,EACE;IACAK,UAAU,EAAEN,YAAY,CAACO,IADzB;IAEAC,SAAS,EAAER,YAAY,CAACS,KAFxB;IAGAC,OAAO,EAAEV,YAAY,CAACW,GAHtB;IAIAC,aAAa,EAAEZ,YAAY,CAACa;EAJ5B,CAFU,CAQZ;EAAA,EACE;IACAP,UAAU,EAAE,IADZ;IAEAE,SAAS,EAAE,IAFX;IAGAE,OAAO,EAAE,IAHT;IAIAE,aAAa,EAAE;EAJf,CAXN;EAkBA,MAAME,QAAQ,GAAG,IAAIC,gBAAJ,CAAqB,CACpCC,aADoC,EAEpCF,QAFoC,KAGlC;IACF;IACA,IAAI,CAACtB,EAAE,CAACyB,OAAR,EAAiB,OAFf,CAEsB;;IAExBpB,QAAQ,CAACmB,aAAD,EAAgBF,QAAhB,CAAR,CAJE,CAMF;;IACAf,IAAI,IAAImB,MAAM,CAAC1B,EAAD,EAAKC,OAAL,EAAcC,KAAd,CAAd;EACD,CAXgB,CAAjB;EAaAoB,QAAQ,CAACK,OAAT,CAAiB3B,EAAjB,EAAqBa,OAArB;EACAb,EAAE,CAACyB,OAAH,GAAaf,MAAM,CAACV,EAAE,CAACyB,OAAJ,CAAnB;EACAzB,EAAE,CAACyB,OAAH,CAAYvB,KAAK,CAAC0B,OAAN,CAAeC,IAA3B,IAAmC;IAAEP;EAAF,CAAnC;AACD;AAED,SAASI,MAAT,CAAiB1B,EAAjB,EAAkCC,OAAlC,EAAiEC,KAAjE,EAA6E;;EAC3E,IAAI,EAAC,QAAE,CAACuB,OAAH,MAAU,IAAV,IAAUK,aAAV,GAAU,MAAV,GAAUA,GAAG5B,KAAK,CAAC0B,OAAN,CAAeC,IAAlB,CAAX,CAAJ,EAAwC;EAExC7B,EAAE,CAACyB,OAAH,CAAWvB,KAAK,CAAC0B,OAAN,CAAeC,IAA1B,EAAiCP,QAAjC,CAA0CS,UAA1C;EACA,OAAO/B,EAAE,CAACyB,OAAH,CAAWvB,KAAK,CAAC0B,OAAN,CAAeC,IAA1B,CAAP;AACD;AAED,OAAO,MAAMG,MAAM,GAAG;EACpBjC,QADoB;EAEpB2B;AAFoB,CAAf;AAKP,eAAeM,MAAf","names":["inserted","el","binding","vnode","modifiers","value","callback","handler","once","modifierKeys","hasModifiers","Object","keys","length","options","attributes","attr","childList","child","subtree","sub","characterData","char","observer","MutationObserver","mutationsList","_mutate","unbind","observe","context","_uid","_a","disconnect","Mutate"],"sourceRoot":"","sources":["../../../src/directives/mutate/index.ts"],"sourcesContent":["import { VNode, VNodeDirective } from 'vue'\n\ntype MutateHandler = (\n  mutationsList: MutationRecord[],\n  observer: MutationObserver,\n) => void\n\ninterface MutateVNodeDirective extends Omit<VNodeDirective, 'modifiers'> {\n  value?: MutateHandler | { handler: MutateHandler, options?: MutationObserverInit }\n  modifiers?: {\n    once?: boolean\n    attr?: boolean\n    child?: boolean\n    sub?: boolean\n    char?: boolean\n  }\n}\n\nfunction inserted (el: HTMLElement, binding: MutateVNodeDirective, vnode: VNode) {\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const callback = typeof value === 'object' ? value.handler : value!\n  const { once, ...modifierKeys } = modifiers\n  const hasModifiers = Object.keys(modifierKeys).length > 0\n\n  // Options take top priority\n  const options = typeof value === 'object' && value.options\n    ? value.options\n    : hasModifiers\n      // If we have modifiers, use only those provided\n      ? {\n        attributes: modifierKeys.attr,\n        childList: modifierKeys.child,\n        subtree: modifierKeys.sub,\n        characterData: modifierKeys.char,\n      }\n      // Defaults to everything on\n      : {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        characterData: true,\n      }\n\n  const observer = new MutationObserver((\n    mutationsList: MutationRecord[],\n    observer: MutationObserver\n  ) => {\n    /* istanbul ignore if */\n    if (!el._mutate) return // Just in case, should never fire\n\n    callback(mutationsList, observer)\n\n    // If has the once modifier, unbind\n    once && unbind(el, binding, vnode)\n  })\n\n  observer.observe(el, options)\n  el._mutate = Object(el._mutate)\n  el._mutate![vnode.context!._uid] = { observer }\n}\n\nfunction unbind (el: HTMLElement, binding: MutateVNodeDirective, vnode: VNode) {\n  if (!el._mutate?.[vnode.context!._uid]) return\n\n  el._mutate[vnode.context!._uid]!.observer.disconnect()\n  delete el._mutate[vnode.context!._uid]\n}\n\nexport const Mutate = {\n  inserted,\n  unbind,\n}\n\nexport default Mutate\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}