{"ast":null,"code":"// Helpers\nimport { convertToUnit } from '../../util/helpers'; // Types\n\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'measurable',\n  props: {\n    height: [Number, String],\n    maxHeight: [Number, String],\n    maxWidth: [Number, String],\n    minHeight: [Number, String],\n    minWidth: [Number, String],\n    width: [Number, String]\n  },\n  computed: {\n    measurableStyles() {\n      const styles = {};\n      const height = convertToUnit(this.height);\n      const minHeight = convertToUnit(this.minHeight);\n      const minWidth = convertToUnit(this.minWidth);\n      const maxHeight = convertToUnit(this.maxHeight);\n      const maxWidth = convertToUnit(this.maxWidth);\n      const width = convertToUnit(this.width);\n      if (height) styles.height = height;\n      if (minHeight) styles.minHeight = minHeight;\n      if (minWidth) styles.minWidth = minWidth;\n      if (maxHeight) styles.maxHeight = maxHeight;\n      if (maxWidth) styles.maxWidth = maxWidth;\n      if (width) styles.width = width;\n      return styles;\n    }\n  }\n});","map":{"version":3,"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,oBAA9B,C,CAEA;;AACA,OAAOC,GAAP,MAA8B,KAA9B;AAIA,eAAeA,GAAG,CAACC,MAAJ,CAAW;EACxBC,IAAI,EAAE,YADkB;EAGxBC,KAAK,EAAE;IACLC,MAAM,EAAE,CAACC,MAAD,EAASC,MAAT,CADH;IAELC,SAAS,EAAE,CAACF,MAAD,EAASC,MAAT,CAFN;IAGLE,QAAQ,EAAE,CAACH,MAAD,EAASC,MAAT,CAHL;IAILG,SAAS,EAAE,CAACJ,MAAD,EAASC,MAAT,CAJN;IAKLI,QAAQ,EAAE,CAACL,MAAD,EAASC,MAAT,CALL;IAMLK,KAAK,EAAE,CAACN,MAAD,EAASC,MAAT;EANF,CAHiB;EAYxBM,QAAQ,EAAE;IACRC,gBAAgB;MACd,MAAMC,MAAM,GAA2B,EAAvC;MAEA,MAAMV,MAAM,GAAGL,aAAa,CAAC,KAAKK,MAAN,CAA5B;MACA,MAAMK,SAAS,GAAGV,aAAa,CAAC,KAAKU,SAAN,CAA/B;MACA,MAAMC,QAAQ,GAAGX,aAAa,CAAC,KAAKW,QAAN,CAA9B;MACA,MAAMH,SAAS,GAAGR,aAAa,CAAC,KAAKQ,SAAN,CAA/B;MACA,MAAMC,QAAQ,GAAGT,aAAa,CAAC,KAAKS,QAAN,CAA9B;MACA,MAAMG,KAAK,GAAGZ,aAAa,CAAC,KAAKY,KAAN,CAA3B;MAEA,IAAIP,MAAJ,EAAYU,MAAM,CAACV,MAAP,GAAgBA,MAAhB;MACZ,IAAIK,SAAJ,EAAeK,MAAM,CAACL,SAAP,GAAmBA,SAAnB;MACf,IAAIC,QAAJ,EAAcI,MAAM,CAACJ,QAAP,GAAkBA,QAAlB;MACd,IAAIH,SAAJ,EAAeO,MAAM,CAACP,SAAP,GAAmBA,SAAnB;MACf,IAAIC,QAAJ,EAAcM,MAAM,CAACN,QAAP,GAAkBA,QAAlB;MACd,IAAIG,KAAJ,EAAWG,MAAM,CAACH,KAAP,GAAeA,KAAf;MAEX,OAAOG,MAAP;IACD;EAnBO;AAZc,CAAX,CAAf","names":["convertToUnit","Vue","extend","name","props","height","Number","String","maxHeight","maxWidth","minHeight","minWidth","width","computed","measurableStyles","styles"],"sourceRoot":"","sources":["../../../src/mixins/measurable/index.ts"],"sourcesContent":["// Helpers\nimport { convertToUnit } from '../../util/helpers'\n\n// Types\nimport Vue, { PropType } from 'vue'\n\nexport type NumberOrNumberString = PropType<string | number | undefined>\n\nexport default Vue.extend({\n  name: 'measurable',\n\n  props: {\n    height: [Number, String] as NumberOrNumberString,\n    maxHeight: [Number, String] as NumberOrNumberString,\n    maxWidth: [Number, String] as NumberOrNumberString,\n    minHeight: [Number, String] as NumberOrNumberString,\n    minWidth: [Number, String] as NumberOrNumberString,\n    width: [Number, String] as NumberOrNumberString,\n  },\n\n  computed: {\n    measurableStyles (): object {\n      const styles: Record<string, string> = {}\n\n      const height = convertToUnit(this.height)\n      const minHeight = convertToUnit(this.minHeight)\n      const minWidth = convertToUnit(this.minWidth)\n      const maxHeight = convertToUnit(this.maxHeight)\n      const maxWidth = convertToUnit(this.maxWidth)\n      const width = convertToUnit(this.width)\n\n      if (height) styles.height = height\n      if (minHeight) styles.minHeight = minHeight\n      if (minWidth) styles.minWidth = minWidth\n      if (maxHeight) styles.maxHeight = maxHeight\n      if (maxWidth) styles.maxWidth = maxWidth\n      if (width) styles.width = width\n\n      return styles\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}