{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"../../../src/components/VGrid/VGrid.sass\";\nimport Vue from 'vue';\nimport mergeData from '../../util/mergeData';\nimport { upperFirst } from '../../util/helpers'; // no xs\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl'];\nconst ALIGNMENT = ['start', 'end', 'center'];\nfunction makeProps(prefix, def) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + upperFirst(val)] = def();\n    return props;\n  }, {});\n}\nconst alignValidator = str => [...ALIGNMENT, 'baseline', 'stretch'].includes(str);\nconst alignProps = makeProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator\n}));\nconst justifyValidator = str => [...ALIGNMENT, 'space-between', 'space-around'].includes(str);\nconst justifyProps = makeProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator\n}));\nconst alignContentValidator = str => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str);\nconst alignContentProps = makeProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator\n}));\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps)\n};\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content'\n};\nfunction breakpointClass(type, prop, val) {\n  let className = classMap[type];\n  if (val == null) {\n    return undefined;\n  }\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // .align-items-sm-center\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\nconst cache = new Map();\nexport default Vue.extend({\n  name: 'v-row',\n  functional: true,\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator\n    },\n    ...alignContentProps\n  },\n  render(h, {\n    props,\n    data,\n    children\n  }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = '';\n    for (const prop in props) {\n      cacheKey += String(props[prop]);\n    }\n    let classList = cache.get(cacheKey);\n    if (!classList) {\n      classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props\n\n      let type;\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n      classList.push({\n        'no-gutters': props.noGutters,\n        'row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent\n      });\n      cache.set(cacheKey, classList);\n    }\n    return h(props.tag, mergeData(data, {\n      staticClass: 'row',\n      class: classList\n    }), children);\n  }\n});","map":{"version":3,"mappings":"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","names":["Vue","mergeData","upperFirst","breakpoints","ALIGNMENT","makeProps","prefix","def","reduce","props","val","alignValidator","str","includes","alignProps","type","String","default","validator","justifyValidator","justifyProps","alignContentValidator","alignContentProps","propMap","align","Object","keys","justify","alignContent","classMap","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","cache","Map","extend","name","functional","tag","dense","Boolean","noGutters","render","h","data","children","cacheKey","classList","get","forEach","value","push","set","staticClass","class"],"sourceRoot":"","sources":["../../../src/components/VGrid/VRow.ts"],"sourcesContent":["import './VGrid.sass'\n\nimport Vue, { PropOptions } from 'vue'\nimport mergeData from '../../util/mergeData'\nimport { upperFirst } from '../../util/helpers'\n\n// no xs\nconst breakpoints = ['sm', 'md', 'lg', 'xl']\n\nconst ALIGNMENT = ['start', 'end', 'center']\n\nfunction makeProps (prefix: string, def: () => PropOptions) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + upperFirst(val)] = def()\n    return props\n  }, {} as Dictionary<PropOptions>)\n}\n\nconst alignValidator = (str: any) => [...ALIGNMENT, 'baseline', 'stretch'].includes(str)\nconst alignProps = makeProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator,\n}))\n\nconst justifyValidator = (str: any) => [...ALIGNMENT, 'space-between', 'space-around'].includes(str)\nconst justifyProps = makeProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator,\n}))\n\nconst alignContentValidator = (str: any) => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str)\nconst alignContentProps = makeProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator,\n}))\n\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps),\n}\n\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content',\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: string) {\n  let className = classMap[type]\n  if (val == null) {\n    return undefined\n  }\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // .align-items-sm-center\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst cache = new Map<string, any[]>()\n\nexport default Vue.extend({\n  name: 'v-row',\n  functional: true,\n  props: {\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator,\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator,\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator,\n    },\n    ...alignContentProps,\n  },\n  render (h, { props, data, children }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = ''\n    for (const prop in props) {\n      cacheKey += String((props as any)[prop])\n    }\n    let classList = cache.get(cacheKey)\n\n    if (!classList) {\n      classList = []\n      // Loop through `align`, `justify`, `alignContent` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      classList.push({\n        'no-gutters': props.noGutters,\n        'row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent,\n      })\n\n      cache.set(cacheKey, classList)\n    }\n\n    return h(\n      props.tag,\n      mergeData(data, {\n        staticClass: 'row',\n        class: classList,\n      }),\n      children\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}