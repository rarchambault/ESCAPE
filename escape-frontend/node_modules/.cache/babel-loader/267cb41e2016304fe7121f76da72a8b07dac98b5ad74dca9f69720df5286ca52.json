{"ast":null,"code":"import Vue from 'vue';\nimport { consoleError } from '../../util/console';\nimport { isCssColor } from '../../util/colorUtils';\nexport default Vue.extend({\n  name: 'colorable',\n  props: {\n    color: String\n  },\n  methods: {\n    setBackgroundColor(color, data = {}) {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style,\n          'background-color': `${color}`,\n          'border-color': `${color}`\n        };\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true\n        };\n      }\n      return data;\n    },\n    setTextColor(color, data = {}) {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style,\n          color: `${color}`,\n          'caret-color': `${color}`\n        };\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2);\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true\n        };\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true;\n        }\n      }\n      return data;\n    }\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,eAAeF,GAAG,CAACG,MAAJ,CAAW;EACxBC,IAAI,EAAE,WADkB;EAGxBC,KAAK,EAAE;IACLC,KAAK,EAAEC;EADF,CAHiB;EAOxBC,OAAO,EAAE;IACPC,kBAAkB,CAAEH,KAAF,EAA0BI,OAAkB,EAA5C,EAA8C;MAC9D,IAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;QAClC;QACAV,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;QACA,OAAOS,IAAP;MACD;MACD,IAAI,OAAOA,IAAI,CAACE,KAAZ,KAAsB,QAA1B,EAAoC;QAClC;QACAX,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;QACA,OAAOS,IAAP;MACD;MACD,IAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;QACrBI,IAAI,CAACC,KAAL,GAAa;UACX,GAAGD,IAAI,CAACC,KADG;UAEX,oBAAoB,GAAGL,KAAK,EAFjB;UAGX,gBAAgB,GAAGA,KAAK;QAHb,CAAb;MAKD,CAND,MAMO,IAAIA,KAAJ,EAAW;QAChBI,IAAI,CAACE,KAAL,GAAa;UACX,GAAGF,IAAI,CAACE,KADG;UAEX,CAACN,KAAD,GAAS;QAFE,CAAb;MAID;MAED,OAAOI,IAAP;IACD,CA5BM;IA8BPG,YAAY,CAAEP,KAAF,EAA0BI,OAAkB,EAA5C,EAA8C;MACxD,IAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;QAClC;QACAV,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;QACA,OAAOS,IAAP;MACD;MACD,IAAI,OAAOA,IAAI,CAACE,KAAZ,KAAsB,QAA1B,EAAoC;QAClC;QACAX,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;QACA,OAAOS,IAAP;MACD;MACD,IAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;QACrBI,IAAI,CAACC,KAAL,GAAa;UACX,GAAGD,IAAI,CAACC,KADG;UAEXL,KAAK,EAAE,GAAGA,KAAK,EAFJ;UAGX,eAAe,GAAGA,KAAK;QAHZ,CAAb;MAKD,CAND,MAMO,IAAIA,KAAJ,EAAW;QAChB,MAAM,CAACQ,SAAD,EAAYC,aAAZ,IAA6BT,KAAK,CAACU,QAAN,GAAiBC,IAAjB,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,CAAnC;QACAR,IAAI,CAACE,KAAL,GAAa;UACX,GAAGF,IAAI,CAACE,KADG;UAEX,CAACE,SAAS,GAAG,QAAb,GAAwB;QAFb,CAAb;QAIA,IAAIC,aAAJ,EAAmB;UACjBL,IAAI,CAACE,KAAL,CAAW,WAAWG,aAAtB,IAAuC,IAAvC;QACD;MACF;MACD,OAAOL,IAAP;IACD;EA5DM;AAPe,CAAX,CAAf","names":["Vue","consoleError","isCssColor","extend","name","props","color","String","methods","setBackgroundColor","data","style","class","setTextColor","colorName","colorModifier","toString","trim","split"],"sourceRoot":"","sources":["../../../src/mixins/colorable/index.ts"],"sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\nimport { consoleError } from '../../util/console'\nimport { isCssColor } from '../../util/colorUtils'\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String,\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'background-color': `${color}`,\n          'border-color': `${color}`,\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true,\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          color: `${color}`,\n          'caret-color': `${color}`,\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true,\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}