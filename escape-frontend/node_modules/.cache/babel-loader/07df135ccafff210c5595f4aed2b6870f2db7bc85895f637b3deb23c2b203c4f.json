{"ast":null,"code":"import Vue from 'vue';\n/**\n * This mixin provides `attrs$` and `listeners$` to work around\n * vue bug https://github.com/vuejs/vue/issues/10115\n */\n\nfunction makeWatcher(property) {\n  return function (val, oldVal) {\n    for (const attr in oldVal) {\n      if (!Object.prototype.hasOwnProperty.call(val, attr)) {\n        this.$delete(this.$data[property], attr);\n      }\n    }\n    for (const attr in val) {\n      this.$set(this.$data[property], attr, val[attr]);\n    }\n  };\n}\nexport default Vue.extend({\n  data: () => ({\n    attrs$: {},\n    listeners$: {}\n  }),\n  created() {\n    // Work around unwanted re-renders: https://github.com/vuejs/vue/issues/10115\n    // Make sure to use `attrs$` instead of `$attrs` (confusing right?)\n    this.$watch('$attrs', makeWatcher('attrs$'), {\n      immediate: true\n    });\n    this.$watch('$listeners', makeWatcher('listeners$'), {\n      immediate: true\n    });\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA;;;AAGG;;AAEH,SAASC,WAAT,CAAsBC,QAAtB,EAAsC;EACpC,OAAO,UAAqBC,GAArB,EAA0BC,MAA1B,EAAgC;IACrC,KAAK,MAAMC,IAAX,IAAmBD,MAAnB,EAA2B;MACzB,IAAI,CAACE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CE,IAA1C,CAAL,EAAsD;QACpD,KAAKK,OAAL,CAAa,KAAKC,KAAL,CAAWT,QAAX,CAAb,EAAmCG,IAAnC;MACD;IACF;IACD,KAAK,MAAMA,IAAX,IAAmBF,GAAnB,EAAwB;MACtB,KAAKS,IAAL,CAAU,KAAKD,KAAL,CAAWT,QAAX,CAAV,EAAgCG,IAAhC,EAAsCF,GAAG,CAACE,IAAD,CAAzC;IACD;EACF,CATD;AAUD;AAED,eAAeL,GAAG,CAACa,MAAJ,CAAW;EACxBC,IAAI,EAAE,OAAO;IACXC,MAAM,EAAE,EADG;IAEXC,UAAU,EAAE;EAFD,CAAP,CADkB;EAMxBC,OAAO;IACL;IACA;IACA,KAAKC,MAAL,CAAY,QAAZ,EAAsBjB,WAAW,CAAC,QAAD,CAAjC,EAA6C;MAAEkB,SAAS,EAAE;IAAb,CAA7C;IACA,KAAKD,MAAL,CAAY,YAAZ,EAA0BjB,WAAW,CAAC,YAAD,CAArC,EAAqD;MAAEkB,SAAS,EAAE;IAAb,CAArD;EACD;AAXuB,CAAX,CAAf","names":["Vue","makeWatcher","property","val","oldVal","attr","Object","prototype","hasOwnProperty","call","$delete","$data","$set","extend","data","attrs$","listeners$","created","$watch","immediate"],"sourceRoot":"","sources":["../../../src/mixins/binds-attrs/index.ts"],"sourcesContent":["import Vue from 'vue'\n\n/**\n * This mixin provides `attrs$` and `listeners$` to work around\n * vue bug https://github.com/vuejs/vue/issues/10115\n */\n\nfunction makeWatcher (property: string): ThisType<Vue> & ((val: any, oldVal: any) => void) {\n  return function (this: Vue, val, oldVal) {\n    for (const attr in oldVal) {\n      if (!Object.prototype.hasOwnProperty.call(val, attr)) {\n        this.$delete(this.$data[property], attr)\n      }\n    }\n    for (const attr in val) {\n      this.$set(this.$data[property], attr, val[attr])\n    }\n  }\n}\n\nexport default Vue.extend({\n  data: () => ({\n    attrs$: {} as Dictionary<string>,\n    listeners$: {} as Dictionary<Function | Function[]>,\n  }),\n\n  created () {\n    // Work around unwanted re-renders: https://github.com/vuejs/vue/issues/10115\n    // Make sure to use `attrs$` instead of `$attrs` (confusing right?)\n    this.$watch('$attrs', makeWatcher('attrs$'), { immediate: true })\n    this.$watch('$listeners', makeWatcher('listeners$'), { immediate: true })\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}