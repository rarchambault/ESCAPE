{"ast":null,"code":"/* eslint-disable max-len, import/export, no-use-before-define */\nimport Vue from 'vue';\nexport default function mixins(...args) {\n  return Vue.extend({\n    mixins: args\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,OAAOA,GAAP,MAAoC,KAApC;AAIA,eAAc,SAAUC,MAAV,CAAkB,GAAGC,IAArB,EAA2C;EACvD,OAAOF,GAAG,CAACG,MAAJ,CAAW;IAAEF,MAAM,EAAEC;EAAV,CAAX,CAAP;AACD","names":["Vue","mixins","args","extend"],"sourceRoot":"","sources":["../../src/util/mixins.ts"],"sourcesContent":["/* eslint-disable max-len, import/export, no-use-before-define */\nimport Vue, { VueConstructor } from 'vue'\n\nexport default function mixins<T extends VueConstructor[]> (...args: T): ExtractVue<T> extends infer V ? V extends Vue ? VueConstructor<V> : never : never\nexport default function mixins<T extends Vue> (...args: VueConstructor[]): VueConstructor<T>\nexport default function mixins (...args: VueConstructor[]): VueConstructor {\n  return Vue.extend({ mixins: args })\n}\n\n/**\n * Returns the instance type from a VueConstructor\n * Useful for adding types when using mixins().extend()\n */\nexport type ExtractVue<T extends VueConstructor | VueConstructor[]> = T extends (infer U)[]\n  ? UnionToIntersection<\n    U extends VueConstructor<infer V> ? V : never\n  >\n  : T extends VueConstructor<infer V> ? V : never\n\ntype UnionToIntersection<U> =\n  (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}