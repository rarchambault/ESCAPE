{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\n/* @vue/component */\n\nexport default Vue.extend({\n  name: 'roundable',\n  props: {\n    rounded: [Boolean, String],\n    tile: Boolean\n  },\n  computed: {\n    roundedClasses() {\n      const composite = [];\n      const rounded = typeof this.rounded === 'string' ? String(this.rounded) : this.rounded === true;\n      if (this.tile) {\n        composite.push('rounded-0');\n      } else if (typeof rounded === 'string') {\n        const values = rounded.split(' ');\n        for (const value of values) {\n          composite.push(`rounded-${value}`);\n        }\n      } else if (rounded) {\n        composite.push('rounded');\n      }\n      return composite.length > 0 ? {\n        [composite.join(' ')]: true\n      } : {};\n    }\n  }\n});","map":{"version":3,"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA;;AACA,eAAeA,GAAG,CAACC,MAAJ,CAAW;EACxBC,IAAI,EAAE,WADkB;EAGxBC,KAAK,EAAE;IACLC,OAAO,EAAE,CAACC,OAAD,EAAUC,MAAV,CADJ;IAELC,IAAI,EAAEF;EAFD,CAHiB;EAQxBG,QAAQ,EAAE;IACRC,cAAc;MACZ,MAAMC,SAAS,GAAG,EAAlB;MACA,MAAMN,OAAO,GAAG,OAAO,KAAKA,OAAZ,KAAwB,QAAxB,GACZE,MAAM,CAAC,KAAKF,OAAN,CADM,GAEZ,KAAKA,OAAL,KAAiB,IAFrB;MAIA,IAAI,KAAKG,IAAT,EAAe;QACbG,SAAS,CAACC,IAAV,CAAe,WAAf;MACD,CAFD,MAEO,IAAI,OAAOP,OAAP,KAAmB,QAAvB,EAAiC;QACtC,MAAMQ,MAAM,GAAGR,OAAO,CAACS,KAAR,CAAc,GAAd,CAAf;QAEA,KAAK,MAAMC,KAAX,IAAoBF,MAApB,EAA4B;UAC1BF,SAAS,CAACC,IAAV,CAAe,WAAWG,KAAK,EAA/B;QACD;MACF,CANM,MAMA,IAAIV,OAAJ,EAAa;QAClBM,SAAS,CAACC,IAAV,CAAe,SAAf;MACD;MAED,OAAOD,SAAS,CAACK,MAAV,GAAmB,CAAnB,GAAuB;QAC5B,CAACL,SAAS,CAACM,IAAV,CAAe,GAAf,CAAD,GAAuB;MADK,CAAvB,GAEH,EAFJ;IAGD;EAtBO;AARc,CAAX,CAAf","names":["Vue","extend","name","props","rounded","Boolean","String","tile","computed","roundedClasses","composite","push","values","split","value","length","join"],"sourceRoot":"","sources":["../../../src/mixins/roundable/index.ts"],"sourcesContent":["import Vue from 'vue'\n\n/* @vue/component */\nexport default Vue.extend({\n  name: 'roundable',\n\n  props: {\n    rounded: [Boolean, String],\n    tile: Boolean,\n  },\n\n  computed: {\n    roundedClasses (): Record<string, boolean> {\n      const composite = []\n      const rounded = typeof this.rounded === 'string'\n        ? String(this.rounded)\n        : this.rounded === true\n\n      if (this.tile) {\n        composite.push('rounded-0')\n      } else if (typeof rounded === 'string') {\n        const values = rounded.split(' ')\n\n        for (const value of values) {\n          composite.push(`rounded-${value}`)\n        }\n      } else if (rounded) {\n        composite.push('rounded')\n      }\n\n      return composite.length > 0 ? {\n        [composite.join(' ')]: true,\n      } : {}\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}