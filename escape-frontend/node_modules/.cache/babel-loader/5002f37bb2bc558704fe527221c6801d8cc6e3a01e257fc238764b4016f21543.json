{"ast":null,"code":"import Vue from 'vue';\n/* @vue/component */\n\nconst Themeable = Vue.extend().extend({\n  name: 'themeable',\n  provide() {\n    return {\n      theme: this.themeableProvide\n    };\n  },\n  inject: {\n    theme: {\n      default: {\n        isDark: false\n      }\n    }\n  },\n  props: {\n    dark: {\n      type: Boolean,\n      default: null\n    },\n    light: {\n      type: Boolean,\n      default: null\n    }\n  },\n  data() {\n    return {\n      themeableProvide: {\n        isDark: false\n      }\n    };\n  },\n  computed: {\n    appIsDark() {\n      return this.$vuetify.theme.dark || false;\n    },\n    isDark() {\n      if (this.dark === true) {\n        // explicitly dark\n        return true;\n      } else if (this.light === true) {\n        // explicitly light\n        return false;\n      } else {\n        // inherit from parent, or default false if there is none\n        return this.theme.isDark;\n      }\n    },\n    themeClasses() {\n      return {\n        'theme--dark': this.isDark,\n        'theme--light': !this.isDark\n      };\n    },\n    /** Used by menus and dialogs, inherits from v-app instead of the parent */\n    rootIsDark() {\n      if (this.dark === true) {\n        // explicitly dark\n        return true;\n      } else if (this.light === true) {\n        // explicitly light\n        return false;\n      } else {\n        // inherit from v-app\n        return this.appIsDark;\n      }\n    },\n    rootThemeClasses() {\n      return {\n        'theme--dark': this.rootIsDark,\n        'theme--light': !this.rootIsDark\n      };\n    }\n  },\n  watch: {\n    isDark: {\n      handler(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.themeableProvide.isDark = this.isDark;\n        }\n      },\n      immediate: true\n    }\n  }\n});\nexport default Themeable;\nexport function functionalThemeClasses(context) {\n  const vm = {\n    ...context.props,\n    ...context.injections\n  };\n  const isDark = Themeable.options.computed.isDark.call(vm);\n  return Themeable.options.computed.themeClasses.call({\n    isDark\n  });\n}","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AASA;;AACA,MAAMC,SAAS,GAAGD,GAAG,CAACE,MAAJ,GAAsBA,MAAtB,CAA6B;EAC7CC,IAAI,EAAE,WADuC;EAG7CC,OAAO;IACL,OAAO;MACLC,KAAK,EAAE,KAAKC;IADP,CAAP;EAGD,CAP4C;EAS7CC,MAAM,EAAE;IACNF,KAAK,EAAE;MACLG,OAAO,EAAE;QACPC,MAAM,EAAE;MADD;IADJ;EADD,CATqC;EAiB7CC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,OADF;MAEJL,OAAO,EAAE;IAFL,CADD;IAKLM,KAAK,EAAE;MACLF,IAAI,EAAEC,OADD;MAELL,OAAO,EAAE;IAFJ;EALF,CAjBsC;EA4B7CO,IAAI;IACF,OAAO;MACLT,gBAAgB,EAAE;QAChBG,MAAM,EAAE;MADQ;IADb,CAAP;EAKD,CAlC4C;EAoC7CO,QAAQ,EAAE;IACRC,SAAS;MACP,OAAO,KAAKC,QAAL,CAAcb,KAAd,CAAoBM,IAApB,IAA4B,KAAnC;IACD,CAHO;IAIRF,MAAM;MACJ,IAAI,KAAKE,IAAL,KAAc,IAAlB,EAAwB;QACtB;QACA,OAAO,IAAP;MACD,CAHD,MAGO,IAAI,KAAKG,KAAL,KAAe,IAAnB,EAAyB;QAC9B;QACA,OAAO,KAAP;MACD,CAHM,MAGA;QACL;QACA,OAAO,KAAKT,KAAL,CAAWI,MAAlB;MACD;IACF,CAfO;IAgBRU,YAAY;MACV,OAAO;QACL,eAAe,KAAKV,MADf;QAEL,gBAAgB,CAAC,KAAKA;MAFjB,CAAP;IAID,CArBO;IAsBR;IACAW,UAAU;MACR,IAAI,KAAKT,IAAL,KAAc,IAAlB,EAAwB;QACtB;QACA,OAAO,IAAP;MACD,CAHD,MAGO,IAAI,KAAKG,KAAL,KAAe,IAAnB,EAAyB;QAC9B;QACA,OAAO,KAAP;MACD,CAHM,MAGA;QACL;QACA,OAAO,KAAKG,SAAZ;MACD;IACF,CAlCO;IAmCRI,gBAAgB;MACd,OAAO;QACL,eAAe,KAAKD,UADf;QAEL,gBAAgB,CAAC,KAAKA;MAFjB,CAAP;IAID;EAxCO,CApCmC;EA+E7CE,KAAK,EAAE;IACLb,MAAM,EAAE;MACNc,OAAO,CAAEC,MAAF,EAAUC,MAAV,EAAgB;QACrB,IAAID,MAAM,KAAKC,MAAf,EAAuB;UACrB,KAAKnB,gBAAL,CAAsBG,MAAtB,GAA+B,KAAKA,MAApC;QACD;MACF,CALK;MAMNiB,SAAS,EAAE;IANL;EADH;AA/EsC,CAA7B,CAAlB;AA2FA,eAAezB,SAAf;AAEA,OAAM,SAAU0B,sBAAV,CAAkCC,OAAlC,EAAwD;EAC5D,MAAMC,EAAE,GAAG;IACT,GAAGD,OAAO,CAAClB,KADF;IAET,GAAGkB,OAAO,CAACE;EAFF,CAAX;EAIA,MAAMrB,MAAM,GAAGR,SAAS,CAAC8B,OAAV,CAAkBf,QAAlB,CAA2BP,MAA3B,CAAkCuB,IAAlC,CAAuCH,EAAvC,CAAf;EACA,OAAO5B,SAAS,CAAC8B,OAAV,CAAkBf,QAAlB,CAA2BG,YAA3B,CAAwCa,IAAxC,CAA6C;IAAEvB;EAAF,CAA7C,CAAP;AACD","names":["Vue","Themeable","extend","name","provide","theme","themeableProvide","inject","default","isDark","props","dark","type","Boolean","light","data","computed","appIsDark","$vuetify","themeClasses","rootIsDark","rootThemeClasses","watch","handler","newVal","oldVal","immediate","functionalThemeClasses","context","vm","injections","options","call"],"sourceRoot":"","sources":["../../../src/mixins/themeable/index.ts"],"sourcesContent":["import Vue from 'vue'\nimport { PropType, RenderContext } from 'vue/types/options'\n\ninterface options extends Vue {\n  theme: {\n    isDark: boolean\n  }\n}\n\n/* @vue/component */\nconst Themeable = Vue.extend<options>().extend({\n  name: 'themeable',\n\n  provide (): object {\n    return {\n      theme: this.themeableProvide,\n    }\n  },\n\n  inject: {\n    theme: {\n      default: {\n        isDark: false,\n      },\n    },\n  },\n\n  props: {\n    dark: {\n      type: Boolean as PropType<boolean | null>,\n      default: null,\n    },\n    light: {\n      type: Boolean as PropType<boolean | null>,\n      default: null,\n    },\n  },\n\n  data () {\n    return {\n      themeableProvide: {\n        isDark: false,\n      },\n    }\n  },\n\n  computed: {\n    appIsDark (): boolean {\n      return this.$vuetify.theme.dark || false\n    },\n    isDark (): boolean {\n      if (this.dark === true) {\n        // explicitly dark\n        return true\n      } else if (this.light === true) {\n        // explicitly light\n        return false\n      } else {\n        // inherit from parent, or default false if there is none\n        return this.theme.isDark\n      }\n    },\n    themeClasses (): object {\n      return {\n        'theme--dark': this.isDark,\n        'theme--light': !this.isDark,\n      }\n    },\n    /** Used by menus and dialogs, inherits from v-app instead of the parent */\n    rootIsDark (): boolean {\n      if (this.dark === true) {\n        // explicitly dark\n        return true\n      } else if (this.light === true) {\n        // explicitly light\n        return false\n      } else {\n        // inherit from v-app\n        return this.appIsDark\n      }\n    },\n    rootThemeClasses (): Dictionary<boolean> {\n      return {\n        'theme--dark': this.rootIsDark,\n        'theme--light': !this.rootIsDark,\n      }\n    },\n  },\n\n  watch: {\n    isDark: {\n      handler (newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.themeableProvide.isDark = this.isDark\n        }\n      },\n      immediate: true,\n    },\n  },\n})\n\nexport default Themeable\n\nexport function functionalThemeClasses (context: RenderContext): object {\n  const vm = {\n    ...context.props,\n    ...context.injections,\n  }\n  const isDark = Themeable.options.computed.isDark.call(vm)\n  return Themeable.options.computed.themeClasses.call({ isDark })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}