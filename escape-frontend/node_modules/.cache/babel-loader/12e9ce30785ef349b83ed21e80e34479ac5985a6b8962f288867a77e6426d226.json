{"ast":null,"code":"// Mixins\nimport Delayable from '../delayable';\nimport Toggleable from '../toggleable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { getSlot, getSlotType } from '../../util/helpers';\nimport { consoleError } from '../../util/console';\nconst baseMixins = mixins(Delayable, Toggleable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'activatable',\n  props: {\n    activator: {\n      default: null,\n      validator: val => {\n        return ['string', 'object'].includes(typeof val);\n      }\n    },\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnClick: {\n      type: Boolean,\n      default: true\n    },\n    openOnHover: Boolean,\n    openOnFocus: Boolean\n  },\n  data: () => ({\n    // Do not use this directly, call getActivator() instead\n    activatorElement: null,\n    activatorNode: [],\n    events: ['click', 'mouseenter', 'mouseleave', 'focus'],\n    listeners: {}\n  }),\n  watch: {\n    activator: 'resetActivator',\n    openOnFocus: 'resetActivator',\n    openOnHover: 'resetActivator'\n  },\n  mounted() {\n    const slotType = getSlotType(this, 'activator', true);\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(`The activator slot must be bound, try '<template v-slot:activator=\"{ on }\"><v-btn v-on=\"on\">'`, this);\n    }\n    this.addActivatorEvents();\n  },\n  beforeDestroy() {\n    this.removeActivatorEvents();\n  },\n  methods: {\n    addActivatorEvents() {\n      if (!this.activator || this.disabled || !this.getActivator()) return;\n      this.listeners = this.genActivatorListeners();\n      const keys = Object.keys(this.listeners);\n      for (const key of keys) {\n        this.getActivator().addEventListener(key, this.listeners[key]);\n      }\n    },\n    genActivator() {\n      const node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes()\n      })) || [];\n      this.activatorNode = node;\n      return node;\n    },\n    genActivatorAttributes() {\n      return {\n        role: this.openOnClick && !this.openOnHover ? 'button' : undefined,\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive)\n      };\n    },\n    genActivatorListeners() {\n      if (this.disabled) return {};\n      const listeners = {};\n      if (this.openOnHover) {\n        listeners.mouseenter = e => {\n          this.getActivator(e);\n          this.runDelay('open');\n        };\n        listeners.mouseleave = e => {\n          this.getActivator(e);\n          this.runDelay('close');\n        };\n      } else if (this.openOnClick) {\n        listeners.click = e => {\n          const activator = this.getActivator(e);\n          if (activator) activator.focus();\n          e.stopPropagation();\n          this.isActive = !this.isActive;\n        };\n      }\n      if (this.openOnFocus) {\n        listeners.focus = e => {\n          this.getActivator(e);\n          e.stopPropagation();\n          this.isActive = !this.isActive;\n        };\n      }\n      return listeners;\n    },\n    getActivator(e) {\n      // If we've already fetched the activator, re-use\n      if (this.activatorElement) return this.activatorElement;\n      let activator = null;\n      if (this.activator) {\n        const target = this.internalActivator ? this.$el : document;\n        if (typeof this.activator === 'string') {\n          // Selector\n          activator = target.querySelector(this.activator);\n        } else if (this.activator.$el) {\n          // Component (ref)\n          activator = this.activator.$el;\n        } else {\n          // HTMLElement | Element\n          activator = this.activator;\n        }\n      } else if (this.activatorNode.length === 1 || this.activatorNode.length && !e) {\n        // Use the contents of the activator slot\n        // There's either only one element in it or we\n        // don't have a click event to use as a last resort\n        const vm = this.activatorNode[0].componentInstance;\n        if (vm && vm.$options.mixins &&\n        //                         Activatable is indirectly used via Menuable\n        vm.$options.mixins.some(m => m.options && ['activatable', 'menuable'].includes(m.options.name))) {\n          // Activator is actually another activatible component, use its activator (#8846)\n          activator = vm.getActivator();\n        } else {\n          activator = this.activatorNode[0].elm;\n        }\n      } else if (e) {\n        // Activated by a click or focus event\n        activator = e.currentTarget || e.target;\n      } // The activator should only be a valid element (Ignore comments and text nodes)\n\n      this.activatorElement = (activator === null || activator === void 0 ? void 0 : activator.nodeType) === Node.ELEMENT_NODE ? activator : null;\n      return this.activatorElement;\n    },\n    getContentSlot() {\n      return getSlot(this, 'default', this.getValueProxy(), true);\n    },\n    getValueProxy() {\n      const self = this;\n      return {\n        get value() {\n          return self.isActive;\n        },\n        set value(isActive) {\n          self.isActive = isActive;\n        }\n      };\n    },\n    removeActivatorEvents() {\n      if (!this.activator || !this.activatorElement) return;\n      const keys = Object.keys(this.listeners);\n      for (const key of keys) {\n        this.activatorElement.removeEventListener(key, this.listeners[key]);\n      }\n      this.listeners = {};\n    },\n    resetActivator() {\n      this.removeActivatorEvents();\n      this.activatorElement = null;\n      this.getActivator();\n      this.addActivatorEvents();\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["Delayable","Toggleable","mixins","getSlot","getSlotType","consoleError","baseMixins","extend","name","props","activator","default","validator","val","includes","disabled","Boolean","internalActivator","openOnClick","type","openOnHover","openOnFocus","data","activatorElement","activatorNode","events","listeners","watch","mounted","slotType","addActivatorEvents","beforeDestroy","removeActivatorEvents","methods","getActivator","genActivatorListeners","keys","Object","key","addEventListener","genActivator","node","assign","getValueProxy","on","attrs","genActivatorAttributes","role","undefined","String","isActive","mouseenter","e","runDelay","mouseleave","click","focus","stopPropagation","target","$el","document","querySelector","length","vm","componentInstance","$options","some","m","options","elm","currentTarget","nodeType","Node","ELEMENT_NODE","getContentSlot","self","value","removeEventListener","resetActivator"],"sourceRoot":"","sources":["../../../src/mixins/activatable/index.ts"],"sourcesContent":["// Mixins\nimport Delayable from '../delayable'\nimport Toggleable from '../toggleable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { getSlot, getSlotType } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\n\n// Types\nimport { VNode, PropType } from 'vue'\n\ntype Listeners = Dictionary<(e: MouseEvent & KeyboardEvent & FocusEvent) => void>\n\nconst baseMixins = mixins(\n  Delayable,\n  Toggleable\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'activatable',\n\n  props: {\n    activator: {\n      default: null as unknown as PropType<string | HTMLElement | VNode | Element | null>,\n      validator: (val: string | object) => {\n        return ['string', 'object'].includes(typeof val)\n      },\n    },\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnClick: {\n      type: Boolean,\n      default: true,\n    },\n    openOnHover: Boolean,\n    openOnFocus: Boolean,\n  },\n\n  data: () => ({\n    // Do not use this directly, call getActivator() instead\n    activatorElement: null as HTMLElement | null,\n    activatorNode: [] as VNode[],\n    events: ['click', 'mouseenter', 'mouseleave', 'focus'],\n    listeners: {} as Listeners,\n  }),\n\n  watch: {\n    activator: 'resetActivator',\n    openOnFocus: 'resetActivator',\n    openOnHover: 'resetActivator',\n  },\n\n  mounted () {\n    const slotType = getSlotType(this, 'activator', true)\n\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(`The activator slot must be bound, try '<template v-slot:activator=\"{ on }\"><v-btn v-on=\"on\">'`, this)\n    }\n\n    this.addActivatorEvents()\n  },\n\n  beforeDestroy () {\n    this.removeActivatorEvents()\n  },\n\n  methods: {\n    addActivatorEvents () {\n      if (\n        !this.activator ||\n        this.disabled ||\n        !this.getActivator()\n      ) return\n\n      this.listeners = this.genActivatorListeners()\n      const keys = Object.keys(this.listeners)\n\n      for (const key of keys) {\n        this.getActivator()!.addEventListener(key, this.listeners[key] as any)\n      }\n    },\n    genActivator () {\n      const node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes(),\n      })) || []\n\n      this.activatorNode = node\n\n      return node\n    },\n    genActivatorAttributes () {\n      return {\n        role: (this.openOnClick && !this.openOnHover) ? 'button' : undefined,\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive),\n      }\n    },\n    genActivatorListeners () {\n      if (this.disabled) return {}\n\n      const listeners: Listeners = {}\n\n      if (this.openOnHover) {\n        listeners.mouseenter = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('open')\n        }\n        listeners.mouseleave = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('close')\n        }\n      } else if (this.openOnClick) {\n        listeners.click = (e: MouseEvent) => {\n          const activator = this.getActivator(e)\n          if (activator) activator.focus()\n\n          e.stopPropagation()\n\n          this.isActive = !this.isActive\n        }\n      }\n\n      if (this.openOnFocus) {\n        listeners.focus = (e: FocusEvent) => {\n          this.getActivator(e)\n\n          e.stopPropagation()\n\n          this.isActive = !this.isActive\n        }\n      }\n\n      return listeners\n    },\n    getActivator (e?: Event): HTMLElement | null {\n      // If we've already fetched the activator, re-use\n      if (this.activatorElement) return this.activatorElement\n\n      let activator = null\n\n      if (this.activator) {\n        const target = this.internalActivator ? this.$el : document\n\n        if (typeof this.activator === 'string') {\n          // Selector\n          activator = target.querySelector(this.activator)\n        } else if ((this.activator as any).$el) {\n          // Component (ref)\n          activator = (this.activator as any).$el\n        } else {\n          // HTMLElement | Element\n          activator = this.activator\n        }\n      } else if (this.activatorNode.length === 1 || (this.activatorNode.length && !e)) {\n        // Use the contents of the activator slot\n        // There's either only one element in it or we\n        // don't have a click event to use as a last resort\n        const vm = this.activatorNode[0].componentInstance\n        if (\n          vm &&\n          vm.$options.mixins && //                         Activatable is indirectly used via Menuable\n          vm.$options.mixins.some((m: any) => m.options && ['activatable', 'menuable'].includes(m.options.name))\n        ) {\n          // Activator is actually another activatible component, use its activator (#8846)\n          activator = (vm as any).getActivator()\n        } else {\n          activator = this.activatorNode[0].elm as HTMLElement\n        }\n      } else if (e) {\n        // Activated by a click or focus event\n        activator = (e.currentTarget || e.target) as HTMLElement\n      }\n\n      // The activator should only be a valid element (Ignore comments and text nodes)\n      this.activatorElement = activator?.nodeType === Node.ELEMENT_NODE ? activator : null\n\n      return this.activatorElement\n    },\n    getContentSlot () {\n      return getSlot(this, 'default', this.getValueProxy(), true)\n    },\n    getValueProxy (): object {\n      const self = this\n      return {\n        get value () {\n          return self.isActive\n        },\n        set value (isActive: boolean) {\n          self.isActive = isActive\n        },\n      }\n    },\n    removeActivatorEvents () {\n      if (\n        !this.activator ||\n        !this.activatorElement\n      ) return\n\n      const keys = Object.keys(this.listeners)\n\n      for (const key of keys) {\n        (this.activatorElement as any).removeEventListener(key, this.listeners[key])\n      }\n\n      this.listeners = {}\n    },\n    resetActivator () {\n      this.removeActivatorEvents()\n      this.activatorElement = null\n      this.getActivator()\n      this.addActivatorEvents()\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}