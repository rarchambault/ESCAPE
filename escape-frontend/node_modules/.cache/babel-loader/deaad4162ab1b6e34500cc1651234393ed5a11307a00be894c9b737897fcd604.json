{"ast":null,"code":"import { keys } from '../../util/helpers';\nimport { colorToInt, intToHex, colorToHex } from '../../util/colorUtils';\nimport * as sRGB from '../../util/color/transformSRGB';\nimport * as LAB from '../../util/color/transformCIELAB';\nexport function parse(theme, isItem = false, variations = true) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  const parsedTheme = {};\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    if (value == null) continue;\n    if (!variations) {\n      parsedTheme[name] = {\n        base: intToHex(colorToInt(value))\n      };\n    } else if (isItem) {\n      /* istanbul ignore else */\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value);\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true, variations);\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value));\n    }\n  }\n  if (!isItem) {\n    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base;\n  }\n  return parsedTheme;\n}\n/**\n * Generate the CSS for a base color (.primary)\n */\n\nconst genBaseColor = (name, value) => {\n  return `\n.v-application .${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\n\nconst genVariantColor = (name, variant, value) => {\n  const [type, n] = variant.split(/(\\d)/, 2);\n  return `\n.v-application .${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\nconst genColorVariableName = (name, variant = 'base') => `--v-${name}-${variant}`;\nconst genColorVariable = (name, variant = 'base') => `var(${genColorVariableName(name, variant)})`;\nexport function genStyles(theme, cssVar = false) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  if (!colors.length) return '';\n  let variablesCss = '';\n  let css = '';\n  const aColor = cssVar ? genColorVariable('anchor') : anchor;\n  css += `.v-application a { color: ${aColor}; }`;\n  cssVar && (variablesCss += `  ${genColorVariableName('anchor')}: ${anchor};\\n`);\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base);\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`);\n    const variants = keys(value);\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i];\n      const variantValue = value[variant];\n      if (variant === 'base') continue;\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue);\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`);\n    }\n  }\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`;\n  }\n  return variablesCss + css;\n}\nexport function genVariations(name, value) {\n  const values = {\n    base: intToHex(value)\n  };\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i));\n  }\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i));\n  }\n  return values;\n}\nexport function lighten(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}","map":{"version":3,"mappings":"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","names":["keys","colorToInt","intToHex","colorToHex","sRGB","LAB","parse","theme","isItem","variations","anchor","variant","colors","Object","parsedTheme","i","length","name","value","base","startsWith","genVariations","primary","genBaseColor","genVariantColor","type","n","split","genColorVariableName","genColorVariable","genStyles","cssVar","variablesCss","css","aColor","variants","variantValue","values","lighten","darken","amount","lab","fromXYZ","toXYZ"],"sourceRoot":"","sources":["../../../src/services/theme/utils.ts"],"sourcesContent":["import { keys } from '../../util/helpers'\nimport { colorToInt, intToHex, colorToHex, ColorInt } from '../../util/colorUtils'\nimport * as sRGB from '../../util/color/transformSRGB'\nimport * as LAB from '../../util/color/transformCIELAB'\nimport {\n  VuetifyParsedTheme,\n  VuetifyThemeItem,\n} from 'vuetify/types/services/theme'\n\nexport function parse (\n  theme: Record<string, VuetifyThemeItem>,\n  isItem = false,\n  variations = true,\n): VuetifyParsedTheme {\n  const { anchor, ...variant } = theme\n  const colors = Object.keys(variant)\n  const parsedTheme: any = {}\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    if (value == null) continue\n\n    if (!variations) {\n      parsedTheme[name] = { base: intToHex(colorToInt(value)) }\n    } else if (isItem) {\n      /* istanbul ignore else */\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value)\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true, variations)\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value))\n    }\n  }\n\n  if (!isItem) {\n    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base\n  }\n\n  return parsedTheme\n}\n\n/**\n * Generate the CSS for a base color (.primary)\n */\nconst genBaseColor = (name: string, value: string): string => {\n  return `\n.v-application .${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`\n}\n\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\nconst genVariantColor = (name: string, variant: string, value: string): string => {\n  const [type, n] = variant.split(/(\\d)/, 2)\n  return `\n.v-application .${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`\n}\n\nconst genColorVariableName = (name: string, variant = 'base'): string => `--v-${name}-${variant}`\n\nconst genColorVariable = (name: string, variant = 'base'): string => `var(${genColorVariableName(name, variant)})`\n\nexport function genStyles (theme: VuetifyParsedTheme, cssVar = false): string {\n  const { anchor, ...variant } = theme\n  const colors = Object.keys(variant)\n\n  if (!colors.length) return ''\n\n  let variablesCss = ''\n  let css = ''\n\n  const aColor = cssVar ? genColorVariable('anchor') : anchor\n  css += `.v-application a { color: ${aColor}; }`\n  cssVar && (variablesCss += `  ${genColorVariableName('anchor')}: ${anchor};\\n`)\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base)\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`)\n\n    const variants = keys(value)\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i]\n      const variantValue = value[variant]\n      if (variant === 'base') continue\n\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue)\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`)\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`\n  }\n\n  return variablesCss + css\n}\n\nexport function genVariations (name: string, value: ColorInt): Record<string, string> {\n  const values: Record<string, string> = {\n    base: intToHex(value),\n  }\n\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i))\n  }\n\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i))\n  }\n\n  return values\n}\n\nexport function lighten (value: ColorInt, amount: number): ColorInt {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] + amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n\nexport function darken (value: ColorInt, amount: number): ColorInt {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}